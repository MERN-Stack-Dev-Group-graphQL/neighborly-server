resource_types:
  - name: terraform
    type: registry-image
    source:
      repository: ljfranklin/terraform-resource
      username: ((DOCKER_USER))
      password: ((DOCKER_PASS))
      tag: latest

resources:
  - name: git
    type: git
    source:
      uri: git@github.com:MERN-Stack-Dev-Group-graphQL/neighborly-server.git
      branch: terraform
      private_key: ((private_key))

  - name: terraform-resource
    type: terraform
    source:
      backend_type: s3
      env_name: dev
      backend_config:
        bucket: neighborly-terraform
        key: terraform.tfstate
        region: us-east-1
      env:
        AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
        AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
  - name: s3
    type: s3
    source:
      bucket: neighborly-server-build
      versioned_file: neighborly-server.tar.gz
      access_key_id: ((AWS_ACCESS_KEY_ID))
      secret_access_key: ((AWS_SECRET_ACCESS_KEY))

jobs:
  - name: terraform-infrastructure
    plan:
      - get: git
        trigger: true
      - put: terraform-resource
        params:
          terraform_source: git/ci/terraform/
      - task: build
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: node
              username: ((DOCKER_USER))
              password: ((DOCKER_PASS))
              tag: alpine
          inputs:
            - name: git
          outputs:
            - name: server
              path: git
          params:
            NEIGHBORLY_ENV: ((neighborly_env))
          run:
            path: /bin/sh
            args:
              - -xc
              - |
                cd git &&                
                npm i &&
                echo "$NEIGHBORLY_ENV" >> .env
                pwd
                ls -a
                tar -zcvf neighborly-server.tar.gz -C ../git .                                
      - put: s3
        params:
          file: server/neighborly-server.tar.gz
             
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ubuntu
          inputs:
            - name: s3
              path: .
            - name: terraform-resource
          params:
            SERVER_KEY: ((server_private_key))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                apt-get update && apt-get -y install rsync jq openssh-client
                DEBIAN_FRONTEND=noninteractive apt-get -y install awscli
                export public_ip=$(cat terraform-resource/metadata | jq -r .public_ip)
                echo "$SERVER_KEY" > key_file
                chmod 400 key_file                                               
                rsync --progress -rave "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ./key_file" \
                ./neighborly-server.tar.gz ec2-user@$public_ip:/home/ec2-user/neighborly-server.tar.gz
                ssh -i key_file -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@$public_ip sudo mkdir /var/www/neighborly.tools
                ssh -i key_file -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@$public_ip sudo tar xzf /home/ec2-user/neighborly-server.tar.gz -C /var/www/neighborly.tools/
                ssh -i key_file -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ec2-user@$public_ip /var/www/neighborly.tools/ci/start.sh
                
                # aws ec2-instance-connect send-ssh-public-key \
                #   --region $AWS_REGION \
                #   --instance-id $AWS_INSTANCE_ID \
                #   --availability-zone $AWS_AVAILABILITY_ZONE \
                #   --instance-os-user $AWS_INSTANCE_OS_USER \
                #   --ssh-public-key ./key-file &&
                # rsync --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ./key_file" \
                #   -arvz --delete ./ ec2-user@$public_ip
                # ssh -i ./key_file -o StrictHostKeyChecking=no ec2-user@$public_ip bash -c "'sudo supervisorctl restart neighborly:*'"

  - name: deploy-to-server
    serial: true
    plan:
      - get: git
        trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: node
              username: ((DOCKER_USER))
              password: ((DOCKER_PASS))
              tag: alpine
          inputs:
            - name: git
          outputs:
            - name: server
              path: git
          params:
            NEIGHBORLY_ENV: ((neighborly_env))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd git &&
                npm i &&
                echo "$NEIGHBORLY_ENV" >> .env
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: alpine
              username: ((DOCKER_USER))
              password: ((DOCKER_PASS))
              tag: edge
          inputs:
            - name: server
              path: .
          params:
            AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: ((AWS_DEFAULT_REGION))
            AWS_REGION: ((AWS_REGION))
            AWS_INSTANCE_ID: ((AWS_INSTANCE_ID))
            AWS_AVAILABILITY_ZONE: ((AWS_AVAILABILITY_ZONE))
            AWS_INSTANCE_OS_USER: ((AWS_INSTANCE_OS_USER))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                apk update &&
                apk add rsync openssh-client aws-cli &&
                ssh-keygen -t rsa -f aws_key -q -N "" &&
                chmod 600 aws_key &&
                aws ec2-instance-connect send-ssh-public-key \
                  --region $AWS_REGION \
                  --instance-id $AWS_INSTANCE_ID \
                  --availability-zone $AWS_AVAILABILITY_ZONE \
                  --instance-os-user $AWS_INSTANCE_OS_USER \
                  --ssh-public-key file://aws_key.pub &&
                rsync --progress -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i aws_key" \
                  -arvz --delete ./ ec2-user@ec2-54-146-36-94.compute-1.amazonaws.com:/var/www/neighborly.tools/server/ 
                && ssh -i aws_key -o StrictHostKeyChecking=no ec2-user@neighborly.tools bash -c "'sudo supervisorctl restart neighborly:*'"
